stages:
  - build
  - repoupload

# global settings will be applied to all jobs
variables:
  CMAKE_INTERPROCEDURAL_OPTIMIZATION: 1
  VERBOSE: 1
  DIAGNOSTIC: 1

workflow:
  rules:
    - when: always

# ==================== .helper generic build ======================

.build:
  stage: build
  interruptible: true
  needs: [ ]
  tags:
    - docker
  image: registry.gitlab.com/manticoresearch/dev/external_toolchain:clang13_cmake3232
  variables:
    CACHEB: $CI_PROJECT_DIR/cache
    arch: x86_64
  script:
    - mkdir build && cd build
    - cmake -DPACK=1 $XTRAFLAGS ..
    - cmake --build . --target package
  cache:
    key: release_$DISTR$arch
    paths:
      - $CI_PROJECT_DIR/cache
  artifacts:
    paths:
      - build/manticore*deb
      - build/manticore*rpm
      - build/manticore-*.tar.gz
      - build/manticore-*.zip
      - build/manticore-*.exe
    when: on_success
    expire_in: 12 hrs

# ==================== .helper generic and specific collect of built artifacts ======================

.collect_job:
  variables:
    GIT_STRATEGY: fetch
  stage: repoupload
  interruptible: true
  cache: { }
  tags:
    - dev-host
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: manual
      allow_failure: true
    - if: $CI_COMMIT_BRANCH =~ /^manticore-.*$/
      when: manual
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success

.collect_deb:
  extends: [ .collect_job ]
  script:
    - /bin/bash dist/upload_repo_deb.sh

.collect_rpm:
  extends: [ .collect_job ]
  script:
    - /bin/bash dist/upload_repo_rpm.sh

.collect_arc:
  extends: [ .collect_job ]
  script:
    - /bin/bash dist/upload_repo_arc.sh

# ==================== Mac OS X ======================

osx:
  extends: [ .build ]
  variables:
    DISTR: macos

osxm1:
  extends: [ osx ]
  variables:
    arch: arm64

collect_osx:
  extends: [ .collect_arc ]
  needs: [ osx, osxm1 ]


# ==================== Windows ======================

windows:
  extends: [ .build ]
  variables:
    arch: x64
    DISTR: windows

collect_windows:
  extends: [ .collect_arc ]
  needs: [ windows ]


# ==================== Centos 7 ======================

rhel7:
  extends: [ .build ]
  variables:
    DISTR: rhel7

rhel7_arm:
  extends: [ rhel7 ]
  variables:
    arch: aarch64

collect_rhel7:
  extends: [ .collect_rpm ]
  needs: [ rhel7, rhel7_arm ]
  variables:
    DISTRO: 7


# ==================== Centos 8 ======================

rhel8:
  extends: [ .build ]
  variables:
    DISTR: rhel8

rhel8_arm:
  extends: [ rhel8 ]
  variables:
    arch: aarch64

collect_rhel8:
  extends: [ .collect_rpm ]
  needs: [ rhel8, rhel8_arm ]
  variables:
    DISTRO: 8

# ==================== Debian-based ======================

# ==================== Debian Stretch ======================

stretch:
  extends: [ .build ]
  variables:
    DISTR: stretch

stretch_arm:
  extends: [ stretch ]
  variables:
    arch: aarch64

collect_stretch:
  extends: [ .collect_deb ]
  needs: [ stretch, stretch_arm ]
  variables:
    DISTRO: stretch


# ==================== Ubuntu Xenial ======================

xenial:
  extends: [ .build ]
  variables:
    DISTR: xenial

xenial_arm:
  extends: [ xenial ]
  variables:
    arch: aarch64

collect_xenial:
  extends: [ .collect_deb ]
  needs: [ xenial, xenial_arm ]
  variables:
    DISTRO: xenial



# ==================== Ubuntu Bionic ======================

bionic:
  extends: [ .build ]
  variables:
    DISTR: bionic

bionic_arm:
  extends: [ bionic ]
  variables:
    arch: aarch64

collect_bionic:
  extends: [ .collect_deb ]
  needs: [ bionic, bionic_arm ]
  variables:
    DISTRO: bionic


# ==================== Ubuntu Focal ======================

focal:
  extends: [ .build ]
  variables:
    DISTR: focal

focal_arm:
  extends: [ focal ]
  variables:
    arch: aarch64

collect_focal:
  extends: [ .collect_deb ]
  needs: [ focal, focal_arm ]
  variables:
    DISTRO: focal


# ==================== Debian Buster ======================

buster:
  extends: [ .build ]
  variables:
    DISTR: buster

buster_arm:
  extends: [ buster ]
  variables:
    arch: aarch64

collect_buster:
  extends: [ .collect_deb ]
  needs: [ buster, buster_arm ]
  variables:
    DISTRO: buster


# ==================== Debian Bullseye ======================

bullseye:
  extends: [ .build ]
  variables:
    DISTR: bullseye

bullseye_arm:
  extends: [ bullseye ]
  variables:
    arch: aarch64

collect_bullseye:
  extends: [ .collect_deb ]
  needs: [ bullseye, bullseye_arm ]
  variables:
    DISTRO: bullseye


# ==================== Ubuntu Jammy ======================

jammy:
  extends: [ .build ]
  variables:
    DISTR: jammy

jammy_arm:
  extends: [ jammy ]
  variables:
    arch: aarch64

collect_jammy:
  extends: [ .collect_deb ]
  needs: [ jammy, jammy_arm ]
  variables:
    DISTRO: jammy
